{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import sort from \"./sort-method\"\r\nimport assert from 'assert'\r\nimport {isArray, isFunction, forEach, isObject} from \"lodash\";\r\n\r\nexport default class GrowingPacker {\r\n\tconstructor({\r\n\t\tsortMethod = sort.maxside,\r\n\t\tblocks = []\r\n\t} = {}) {\r\n\r\n\t\tthis.sortMethod = isFunction(sortMethod) ? sortMethod : sort[sortMethod];\r\n\t\tthis.blocks = blocks;\r\n\r\n\t\tassert(isArray(blocks), 'blocks parameters must be an Array');\r\n\t\tassert(isFunction(this.sortMethod), 'sortMethod parameters must be a function or a valid sort method name');\r\n\t\t\r\n\t\tthis.root = {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\tw: 0,\r\n\t\t\th: 0\r\n\t\t};\r\n\t}\r\n\r\n\t/*inject(){\r\n\t\treturn this;\r\n\t}\r\n\r\n\tinit(){\r\n\t\treturn this;\r\n\t}*/\r\n\r\n\tget size(){\r\n\t\treturn {\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.height\r\n\t\t};\r\n\t}\r\n\r\n\tget width(){\r\n\t\treturn this.root.w;\r\n\t}\r\n\r\n\tget height(){\r\n\t\treturn this.root.h;\r\n\t}\r\n\r\n\tpack(blocks = this.blocks){\r\n\t\tblocks.sort(this.sortMethod);\r\n\r\n\t\tlet n, node, block, len = blocks.length;\r\n\t\tlet w = len > 0 ? blocks[0].w : 0;\r\n\t\tlet h = len > 0 ? blocks[0].h : 0;\r\n\r\n\t\tthis.root = {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\tw: w,\r\n\t\t\th: h\r\n\t\t};\r\n\r\n\t\tfor (n = 0; n < len ; n++) {\r\n\t\t\tblock = blocks[n];\r\n\t\t\tif (node = this.findNode(this.root, block.w, block.h)){\r\n\t\t\t\tblock.fit = this.splitNode(node, block.w, block.h);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tblock.fit = this.growNode(block.w, block.h);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tblocks,\r\n\t\t\trectangles: () => {\r\n\t\t\t\treturn this.rectangles(blocks);\r\n\t\t\t},\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.height\r\n\t\t};\r\n\t}\r\n\t\r\n\trectangles(blocks = this.blocks){\r\n\t\tforEach(blocks, block => {\r\n\t\t\tlet fit = block.fit;\r\n\r\n\t\t\tblock.fit = isObject(fit);\r\n\t\t\tblock.x = fit.x;\r\n\t\t\tblock.y = fit.y;\r\n\t\t\tblock.width = block.w;\r\n\t\t\tblock.height = block.h;\r\n\t\t});\r\n\r\n\t\treturn blocks;\r\n\t}\r\n\r\n\tfindNode(root, w, h) {\r\n\t\tif (root.used){\r\n\t\t\treturn this.findNode(root.right, w, h) || this.findNode(root.down, w, h);\r\n\t\t}\r\n\t\telse if ((w <= root.w) && (h <= root.h)){\r\n\t\t\treturn root;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsplitNode(node, w, h) {\r\n\t\tnode.used = true;\r\n\t\tnode.down = {\r\n\t\t\tx: node.x,\r\n\t\t\ty: node.y + h,\r\n\t\t\tw: node.w,\r\n\t\t\th: node.h - h\r\n\t\t};\r\n\r\n\t\tnode.right = {\r\n\t\t\tx: node.x + w,\r\n\t\t\ty: node.y,\r\n\t\t\tw: node.w - w,\r\n\t\t\th: h\r\n\t\t};\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\tgrowNode(w, h) {\r\n\t\tlet canGrowDown  = (w <= this.root.w);\r\n\t\tlet canGrowRight = (h <= this.root.h);\r\n\r\n\t\tlet shouldGrowRight = canGrowRight && (this.root.h >= (this.root.w + w)); // attempt to keep square-ish by growing right when height is much greater than width\r\n\t\tlet shouldGrowDown  = canGrowDown  && (this.root.w >= (this.root.h + h)); // attempt to keep square-ish by growing down  when width  is much greater than height\r\n\r\n\t\tif (shouldGrowRight){\r\n\t\t\treturn this.growRight(w, h);\r\n\t\t}\r\n\t\telse if (shouldGrowDown){\r\n\t\t\treturn this.growDown(w, h);\r\n\t\t}\r\n\t\telse if (canGrowRight){\r\n\t\t\treturn this.growRight(w, h);\r\n\t\t}\r\n\t\telse if (canGrowDown){\r\n\t\t\treturn this.growDown(w, h);\r\n\t\t}\r\n\r\n\t\treturn null; // need to ensure sensible root starting size to avoid this happening\r\n\t}\r\n\r\n\tgrowRight(w, h) {\r\n\t\tlet node;\r\n\r\n\t\tthis.root = {\r\n\t\t\tused: true,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\tw: this.root.w + w,\r\n\t\t\th: this.root.h,\r\n\t\t\tdown: this.root,\r\n\t\t\tright: {\r\n\t\t\t\tx: this.root.w,\r\n\t\t\t\ty: 0,\r\n\t\t\t\tw: w,\r\n\t\t\t\th: this.root.h\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (node = this.findNode(this.root, w, h)){\r\n\t\t\treturn this.splitNode(node, w, h);\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgrowDown(w, h) {\r\n\t\tlet node;\r\n\r\n\t\tthis.root = {\r\n\t\t\tused: true,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\tw: this.root.w,\r\n\t\t\th: this.root.h + h,\r\n\t\t\tdown: {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: this.root.h,\r\n\t\t\t\tw: this.root.w,\r\n\t\t\t\th: h\r\n\t\t\t},\r\n\t\t\tright: this.root\r\n\t\t};\r\n\r\n\t\tif (node = this.findNode(this.root, w, h)){\r\n\t\t\treturn this.splitNode(node, w, h);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n}"],"sourceRoot":"/source/"}